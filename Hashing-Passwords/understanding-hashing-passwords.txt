# ###### Understanding Hashing Of Passwords ######

# ==========================
# ### one-way function ###

In computer science, a one-way function is a function that is easy to compute on every input, but hard to invert given the image of a random input.
Here, "easy" and "hard" are to be understood in the sense of computational complexity theory, specifically the theory of polynomial time problems.
# ==========================
# ### salt ###

In cryptography, a salt is random data that is used as an additional input to a one-way function that hashes data, a password or passphrase.
Salts are used to safeguard passwords in storage.

A new salt is randomly generated for each password.
In a typical setting, the salt and the password (or its version after key stretching) are concatenated and processed with a cryptographic hash function, and the resulting output (but not the original password) is stored with the salt in a database.
Hashing allows for later authentication without keeping and therefore risking exposure of the plaintext password in the event that the authentication data store is compromised.

Historically a password was stored in plaintext on a system, but over time additional safeguards developed to protect a user's password against being read from the system. A salt is one of those methods.

Salts defend against a pre-computed hash attack.

Since salts do not have to be memorized by humans they can make the size of the hash table required for a successful attack prohibitively large without placing a burden on the users.
Since salts are different in each case, they also protect commonly used passwords, or those users who use the same password on several sites, by making all salted hash instances for the same password different from each other.

Cryptographic salts are broadly used in many modern computer systems, from Unix system credentials to Internet security.

Salts are closely related to the concept of a cryptographic nonce.
# ==========================
# ### nonce ###

In cryptography, a nonce is an arbitrary number that can be used just once in a cryptographic communication.
# ==========================
# ### Why we need to hash passwords ###

Whenever verifying a user or something similar with a password, we must never store the password in plaintext.
If an attacker finds a database of plaintext passwords, they can easily be used in combination with matching emails to login to the associated site/account and even used to attempt to log into other accounts since a lot of people use the same password.

A common method used today is to hash passwords when a password is provided.
It is recommended to use a salt when hashing and store the salt with the hashed password.
# ==========================
# ### Why not to use SHA-256 or something similar? ###

Secure Hash Algorithm's are one way functions, that is, once plaintext is hashed, we cannot get the plaintext from the hash.
This is good because it keeps the password hidden and allows for simple verification by hashing a password provided by the user and comparing it to the stored hash of the actual password.

Unfortunately hashing algorithms like SHA-256 are very quick to compute, meaning many combinations of strings can be calculated at a high speed to try and match a particular hash.
If an attacker has gotten hold of password hashes that were hashed with something like SHA-256, they could try to generate every password possible and hash these to find a match for the password hashes, this is called brute forcing.

While today this is not very practical due to the search space for most passwords, a smaller subset approach can be taken called a dictionary attack.
In plain terms, this is where a file/database is previously constructed containing possible passwords that are better guesses than generating every possible password.
Another tactic to matching hashes is using rainbow tables, which takes a more grouped approach on randomly generating passwords.
# ==========================
# ### rainbow table ###

A rainbow table is a precomputed table for reversing cryptographic hash functions, usually for cracking password hashes.
# ==========================
# ### Hashing passwords with pbkdf2_hmac ###

One deference to these matching methods is to use a slower hashing method.
Using a slower hashing method will mean that it takes longer to compute many hashes in a specific period of time thus making it unrealistic to find matches in our lifetime.

PBKDF2 is a key derivation function where the user can set the computational cost, this aims to slow down the calculation of the key to make it more impractical to brute force.
In usage terms, it takes a password, salt and a number or iterations to produce a certain key length which can also be compared to a hash as it is also a one way function.

With iterations set to a large number, the algorithm takes longer to calculate the end result.
This is completely fine for someone that only needs to make one or a couple attempts at checking if a password is correct, however trying billions will take a very long time.

    !!!Please note that using this method does not stop brute force / dictionary attacks or the use of rainbow tables, it simply makes these methods more computationally difficult.

PBKDF2_HMAC is an implementation of the PBKDF2 key derivation function using HMAC as pseudorandom function.
pbkdf2_hmac can be found in the hashlib library (which comes with Python) and is in Python 3.4 and above.

pbkdf2_hmac takes five parameters:
    - hash_name: hash digest algorithm for HMAC
    - password: the password being turned into the key
    - salt: a randomly generated salt
    - iterations: iterations in calculation (higher means more computation required)
    - dklen: length of the output key (not required)
# ==========================
# ### Generating a Salt ###

Before generating the key using pbkdf2_hmac, we need to generate a random salt.
Salts make the search space larger in the case of brute forcing and adds difficulty for rainbow tables, using a salt only requires you to do a little more work and store an extra random byte sequence.

Salts do not need to be hidden, encrypted or hashed, this is because they are simply combined with the password to make the input cover a larger range.
This combination is done by the pbkdf2_hmac so do not do it ourselves.

To generate a salt, use the os.urandom function as it returns random bytes suitable for cryptographic use.
This function does not use pseudo-random number generators so the return value is unpredictable, exactly what is required.

The output from this will be used in pbkdf2_hmac and then stored beside the output key (we will use it as a hash) from pbkdf2_hmac.
Every password relating to a user/entity must have it's own hash, do not use the same hash for all user's/entities passwords.
# ==========================
# ### HMAC ###

In cryptography, an HMAC is a specific type of message authentication code involving a cryptographic hash function and a secret cryptographic key.
As with any MAC, it may be used to simultaneously verify both the data integrity and the authenticity of a message
